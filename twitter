import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re 
import matplotlib.pyplot as plt
from datetime import datetime

#  Print the last 5 tweets
print("Show the 5 recent tweets:\n")
i=1
for tweet in posts[:5]:
    print(str(i) +') '+ tweet.full_text + '\n')
    print (tweet.created_at)
    i= i+1
#for tweet in posts:
 #   tweet.created_at = datetime.strptime("%Y,%b,%d)
#type(posts)
# Create a dataframe with a column called Tweets
coltwt = pd.DataFrame([tweet.full_text for tweet in posts], columns=['Tweets'])
coltime = pd.DataFrame([tweet.created_at for tweet in posts], columns = ['Zeit'])
coltwt.to_csv('./tweets.csv')
coltime.to_csv("./times.csv")
#dt.to_csv('./time.csv')

times = pd.date_range('2019-05-15', periods=260, freq='D')
ts = pd.DataFrame(data = times)
#dt = datetime.datetime.strptime(when, '%Y-%m-%d').date()
# Show the first 5 rows of data
coltwt.head()
coltime.head()



# Create a function to clean the tweets
def cleanTxt(text):
 text = re.sub('@[A-Za-z0–9]+', '', text) #Removing @mentions
 text = re.sub('#', '', text) # Removing '#' hash tag
 text = re.sub('RT[\s]+', '', text) # Removing RT
 text = re.sub('https?:\/\/\S+', '', text) # Removing hyperlink

 return text

# Clean the tweets
coltwt['Tweets'] = coltwt['Tweets'].apply(cleanTxt)

# Show the cleaned tweets
coltwt

#merging two dataFrames

frames = [coltwt, coltime]
timestwt = pd.concat([coltwt, coltime], axis = 1, join = "inner")
dl = pd.concat([timestwt, ts], axis = 1, join = "outer", ignore_index = False)
print ("This is Sparta", timestwt)

# Create a function to get the subjectivity
def getSubjectivity(text):
   return TextBlob(text).sentiment.subjectivity
# Create a function to get the polarity
def getPolarity(text):
   return  TextBlob(text).sentiment.polarity


# Create two new columns 'Subjectivity' & 'Polarity'
timestwt['Subjectivity'] = timestwt['Tweets'].apply(getSubjectivity)
timestwt['Polarity'] = timestwt['Tweets'].apply(getPolarity)

# Show the new dataframe with columns 'Subjectivity' & 'Polarity'
timestwt

'''
Let's see how well the sentiments are distributed. 
A good way to accomplish this task is by understanding the common words by plotting word clouds.
A word cloud (also known as text clouds or tag clouds) is a visualization, the more a specific word 
appears in text, the bigger and bolder it appears in the word cloud.
Let’s visualize all the words in the data using the word cloud plot.
'''

allWords = ' '.join([twts for twts in timestwt['Tweets']])
wordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)


plt.imshow(wordCloud, interpolation="bilinear")
plt.axis('off')
plt.show()

# Create a function to compute negative (-1), neutral (0) and positive (+1) analysis
def getAnalysis(score):
 if score < 0:
  return 'Negative'
 elif score == 0:
  return 'Neutral'
 else:
  return 'Positive'


timestwt['Analysis'] = timestwt['Polarity'].apply(getAnalysis)

# Show the dataframe
timestwt

# Printing positive tweets 
print('Printing positive tweets:\n')
j=1
sortedDF = timestwt.sort_values(by=['Polarity']) #Sort the tweets
for i in range(0, sortedDF.shape[0] ):
  if( sortedDF['Analysis'][i] == 'Positive'):
    print(str(j) + ') '+ sortedDF['Tweets'][i])
    print()
    j= j+1

# Printing negative tweets  
print('Printing negative tweets:\n')
j=1
sortedDF = timestwt.sort_values(by=['Polarity'],ascending=False) #Sort the tweets
for i in range(0, sortedDF.shape[0] ):
  if( sortedDF['Analysis'][i] == 'Negative'):
    print(str(j) + ') '+sortedDF['Tweets'][i])
    print()
    j=j+1



# Plotting
plt.figure(figsize=(8,6))
plt.style.use('fivethirtyeight')
for i in range(0, timestwt.shape[0]):
 plt.scatter(timestwt["Zeit"][i], timestwt["Polarity"][i], color='Blue') # plt.scatter(x,y,color),

 
plt.title('Sentiment Analysis')
plt.xlabel("Time")
plt.ylabel('Polarity')
plt.show()

# Print the percentage of positive tweets
ptweets = timestwt[timestwt.Analysis == 'Positive']
ptweets = ptweets['Tweets']
ptweets

round( (ptweets.shape[0] / timestwt.shape[0]) * 100 , 1)

# Print the percentage of negative tweets
ntweets = timestwt[timestwt.Analysis == 'Negative']
ntweets = ntweets['Tweets']
ntweets

round( (ntweets.shape[0] / timestwt.shape[0]) * 100, 1)

# Show the value counts
timestwt['Analysis'].value_counts()

# Plotting and visualizing the counts
plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Counts')
timestwt['Analysis'].value_counts().plot(kind = 'bar')
plt.show()

 # вместо точек сделать линеарный график
